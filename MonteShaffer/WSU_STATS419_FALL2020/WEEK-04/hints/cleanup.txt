## cleanup ... 3-step

#################################
# hackathon

# working directory is good-to-go

myData = read.csv("personality-raw.txt",header=T,sep="|");



## subtask #1 (remove a column)
myData$V00 = NULL;  ## one method
myData["V00"] = NULL; ## equivalent ...  ****

#idx = which( names(myData)=="V00" );  ## second method 
#myData = myData[,-c(idx)];

## subtask #2 (dates)  ... remove a column ...




#date.obj = strptime("5/17/2007 10:15", format="%m/%d/%Y %H:%M");
#my.year = as.numeric( strftime(date.obj, format='%Y') );
#my.week = as.numeric( strftime(date.obj, format='%W') );

myDate.obj = strptime(myData$date_test, format="%m/%d/%Y %H:%M");

myDate.obj.year = as.numeric( strftime(myDate.obj, format='%Y') );
myDate.obj.week = as.numeric( strftime(myDate.obj, format='%W') );

myData$year = myDate.obj.year;
myData$week = myDate.obj.week;

date.idx = which( names(myData)=="date_test" );



## remove date_test
myData["date_test"] = NULL;

# dim not length
df.dim = dim(myData); 
df.pos = df.dim[2]; 

which( names(myData)=="year" );
which( names(myData)=="week" );

myData = myData[, c(1,62,63, 2:61)];

# date is at beginning
# 1, ... everything else
# date is after first
# 1:(date.idx-1)

if(date.idx == 1)
	{
	reorder = c( (df.pos-1):df.pos, 2:(df.pos-2) );
	}
	else
		{
		reorder = c( 1:(date.idx-1), (df.pos-1):df.pos, 2:(df.pos-2) );
		}

myData = myData[, reorder];

myTest = myData[1:20,1:5];

myTest[ order(myTest[,3]), ];
myTest[ order(-myTest[,3]), ];

myData.sorted = myData[ order(-myData[,date.idx],-myData[,(1+date.idx)]), ];

head(myData.sorted[,1:5]);

u = unique( myData.sorted["md5_email"] );

myData.cleansed = myData.sorted[!duplicated(myData.sorted["md5_email"]), ];

 dim(myData.sorted);
 dim(myData.cleansed);
 
 


#################################
# function hackathn


cleansePersonalityData = function(myData)
	{
	
	
## subtask #1 (remove a column)
myData$V00 = NULL;  ## one method
myData["V00"] = NULL; ## equivalent ...  ****

#idx = which( names(myData)=="V00" );  ## second method 
#myData = myData[,-c(idx)];

## subtask #2 (dates)  ... remove a column ...




#date.obj = strptime("5/17/2007 10:15", format="%m/%d/%Y %H:%M");
#my.year = as.numeric( strftime(date.obj, format='%Y') );
#my.week = as.numeric( strftime(date.obj, format='%W') );

myDate.obj = strptime(myData$date_test, format="%m/%d/%Y %H:%M");

myDate.obj.year = as.numeric( strftime(myDate.obj, format='%Y') );
myDate.obj.week = as.numeric( strftime(myDate.obj, format='%W') );

myData$year = myDate.obj.year;
myData$week = myDate.obj.week;

date.idx = which( names(myData)=="date_test" );



## remove date_test
myData["date_test"] = NULL;

# dim not length
df.dim = dim(myData); 
df.pos = df.dim[2]; 

which( names(myData)=="year" );
which( names(myData)=="week" );

myData = myData[, c(1,62,63, 2:61)];

# date is at beginning
# 1, ... everything else
# date is after first
# 1:(date.idx-1)

if(date.idx == 1)
	{
	reorder = c( (df.pos-1):df.pos, 2:(df.pos-2) );
	}
	else
		{
		reorder = c( 1:(date.idx-1), (df.pos-1):df.pos, 2:(df.pos-2) );
		}

myData = myData[, reorder];

myTest = myData[1:20,1:5];

myTest[ order(myTest[,3]), ];
myTest[ order(-myTest[,3]), ];

myData.sorted = myData[ order(-myData[,date.idx],-myData[,(1+date.idx)]), ];

head(myData.sorted[,1:5]);

u = unique( myData.sorted["md5_email"] );

myData.cleansed = myData.sorted[!duplicated(myData.sorted["md5_email"]), ];

 dim(myData.sorted);
 dim(myData.cleansed);
 
	myData.cleansed;	
	}
	
	
	myData = read.csv("personality-raw.txt",header=T,sep="|");
	newData = cleansePersonalityData(myData);
	
	
	dim(myData);
	dim(newData);
	
	

#################################
# abstract into 2-3 functions


#convertDateStringToFormat(vec,"%Y","%m/%d/%Y %H:%M");
#convertDateStringToFormat(vec,"%W","%m/%d/%Y %H:%M");

# functions/functions-date.R #

convertDateStringToFormat = function (strvec,format.out="%Y",format.in="%Y-%m-%d %H:%M:%S")
	{
	p.obj = strptime(strvec, format=format.in);
	o.obj = as.numeric( strftime(p.obj, format=format.out) );
	
	o.obj;
	}
	
	
removeColumnsFromDataFrame = function(df,mycolumn)
	{
	df[mycolumn] = NULL;
	df;
	}

df = myData;
mycolumn = "V00";

ndf = removeColumnsFromDataFrame(df,"V00");


removeColumnsFromDataFrame(myData,"V00");

	
	
	strvec = myData$date_test;
	vec = strvec;
	
	
	myDate.obj = strptime(myData$date_test, format="%m/%d/%Y %H:%M");

myDate.obj.year = as.numeric( strftime(myDate.obj, format='%Y') );
myDate.obj.week = as.numeric( strftime(myDate.obj, format='%W') );


myData = read.csv("personality-raw.txt",header=T,sep="|");
	newData = cleansePersonalityData(myData);
	
	
	df = myData;
	mycolumn = "date_test";
	
	col.1 = convertDateStringToFormat(vec,"%Y","%m/%d/%Y %H:%M");
	col.2 = convertDateStringToFormat(vec,"%W","%m/%d/%Y %H:%M");
	col.3 = convertDateStringToFormat(vec,"%j","%m/%d/%Y %H:%M");
	
	newcols = cbind(col.1, col.2, col.3);
		colnames(newcols) = c("year","week","day");
	
	
	newDF = replaceDateStringWithDateObjects(myData,mycolumn,newcols);
	
if(FALSE) ## pseudo-method for multi-line comments ...
	{
	# usage 
	mycols = c("rated","ratings","title");
	anchor = "genre";
	where = "after";	
	adf = moveColumnsInDataFrame(df,mycols,anchor,"after");	
	bdf = moveColumnsInDataFrame(df,mycols,anchor,"before");
	}
	
moveColumnsInDataFrame = function(df, mycols, anchor, where="after")
	{
	# anchor is a colname by default, but can be an index (is numeric)
	# mycols are names of the cols ... we will get their locations ...
	# where can be "before" or "after" the anchor 
	
	anchor.idx = anchor;
	if(!is.numeric(anchor)) { anchor.idx = getIndexOfDataFrameColumns(df, anchor); }
	
	n.mycols = length(mycols);
	mycols.idx = numeric();
	for(i in 1:n.mycols)
		{
		mycol = mycols[i];
		idx = getIndexOfDataFrameColumns(df, mycol);
		if(idx != anchor) # can't have anchor in list ... if so, we don't include it ...
			{
			mycols.idx[i] = idx;
			}
		}
	last.one = dim(df)[2];
		order.start = 1:last.one;
	to.move = mycols.idx;
		order.remaining = setdiff(order.start,to.move);
		
	# moving 5,8,2 to after 7 ...
		
	new.anchor = which(order.remaining == anchor.idx);  # we could have some cols before/after anchor ... 	
	
	if(new.anchor == 1)
		{
		before = NULL;
		} else 	{
				if(where=="before")
					{
					before = order.remaining[1:(new.anchor-1)];
					} else 	{
							# default is after ...
							before = order.remaining[1:(new.anchor)];
							}
				}
	after = setdiff(order.remaining,before);			
	
	reorder = c(before, to.move, after);
	
	mdf = df[, reorder];
	
	mdf;
	}
	
replaceDateStringWithDateColumns = function(df, mycolumn, newcols)
		{
		date.idx = getIndexOfDataFrameColumns(df,mycolumn);	# we have the anchor ...
			ndf = cbind(df,newcols);
				mycols = names(newcols); # they must already be named ...
		ndf = moveColumnsInDataFrame(ndf, mycols, date.idx, "after"); # could be "before", we are going to kill it on the next line ...
			removeColumnsFromDataFrame(ndf,mycolumn);
		ndf;
		
		}

if(FALSE)
		{
		
		#function(df, mycols, anchor, where="after")
		
		#date.idx = which( names(df)==mycolumn );
		date.idx = getIndexOfDataFrameColumns(df,mycolumn);
		df[mycolumn] = NULL;
		
		ndf = cbind(df,newcols);
		
		ndf.dim = dim(ndf);
		last.one = ndf.dim[2]; # position of old date-string column 
		
		newcols.dim = dim(newcols);
		newcols.n = newcols.dim[2];  # number of new columns 
		
		to.move =  (last.one-(newcols.n-1)):last.one;
		remaining = 1:((last.one-(newcols.n-1))-1);
		
			before = if(date.idx==1) { NULL } else { 1:(date.idx-1) };
			after = setdiff(remaining,before);
		
		reorder = c(before, to.move, after);
					
		
		rdf = ndf[, reorder];
		rdf;
		
		}
	
	
# date is at beginning
# 1, ... everything else
# date is after first
# 1:(date.idx-1)

mycols = c("year","week","day");
mydirs = c("ASC","ASC","DESC");
mydirs = "DESC";


sortDataFrameByNumericColumns = function (df, mycols, direction="ASC")
	{
	# if length of direction == dim(mycols) ... 
	
	
	}
	## ASC ... DESC ... 
	

myData = read.csv("personality-raw.txt",header=T,sep="|");
	newData = cleansePersonalityData(myData);
	
	
	df = myData;	
mycolumn = "md5_email";
	ndf = removeDuplicationsFromDataFrame(df,mycolumn);
	
	
	dim(df);
	dim(ndf);

removeDuplicationsFromDataFrame	= function(df,mycolumn)
	{	
	ndf = df[!duplicated(df[mycolumn]), ];	
	}
	
	
myData$year = myDate.obj.year;
myData$week = myDate.obj.week;

date.idx = which( names(myData)=="date_test" );



## remove date_test
myData["date_test"] = NULL;

# dim not length
df.dim = dim(myData); 
df.pos = df.dim[2]; 

which( names(myData)=="year" );
which( names(myData)=="week" );

myData = myData[, c(1,62,63, 2:61)];

# date is at beginning
# 1, ... everything else
# date is after first
# 1:(date.idx-1)

if(date.idx == 1)
	{
	reorder = c( (df.pos-1):df.pos, 2:(df.pos-2) );
	}
	else
		{
		reorder = c( 1:(date.idx-1), (df.pos-1):df.pos, 2:(df.pos-2) );
		}

myData = myData[, reorder];



#####################################################
# final answer #

# https://www.statology.org/how-to-normalize-data-in-r/


removeColumnsFromDataFrame = function(df,mycols)
	{
	for(mycol in mycols)  # mycols could be just a single string, which is automatically treated as a vector of length 1.
		{
		df[mycol] = NULL;
		}
	df;
	}
	
convertDateStringToFormat = function (strvec,format.out="%Y",format.in="%Y-%m-%d %H:%M:%S")
	{
	p.obj = strptime(strvec, format=format.in);
	o.obj = as.numeric( strftime(p.obj, format=format.out) );
	
	o.obj;
	}	
	

sortDataFrameByNumericColumns = function (ddf, mycols, direction="DESC")
	{
	## ASC DOESN'T WORK
	## haven't checked the custom direction features ...
	# if length of direction == dim(mycols) ... 
	# if direction.length is not n.cols, we will only use the first element ...
	
	
	
	n.cols = length(mycols);
	n.dirs = length(direction);
	
	if(n.dirs < n.cols) { direction = direction[1]; n.dirs = 1;} # we need to have at least n.cols number of directions, or we will assume it is only one ...
	
	sdf = ddf;
	
	vecs = matrix(NA, nrow=dim(sdf)[1],ncol=n.cols);
	
	
	for(i in 1:n.cols)
		{
		idx = which( names(sdf)== mycols[i] );
		dir = if(n.dirs==1) { direction } else { direction[i]};
		
		if(dir == "ASC")
			{
			vecs[,i] = sdf[,idx];
			} else {  
					# DESC
					vecs[,i] = -sdf[,idx];
					}		
		}	

		
		fdf = sdf[order(vecs), ];
		
		# myData.sorted = myData[ order(-myData[,date.idx],-myData[,(1+date.idx)]), ];
		
		
	fdf;
	}
	
# https://stackoverflow.com/questions/6819804/how-to-convert-a-matrix-to-a-list-of-column-vectors-in-r	
castMatrixToSequenceOfLists = function(mat)
	{
	list_length = ncol(mat);
    out_list = vector("list", list_length);
    for(i in 1:list_length)
		{
		out_list[[i]] = mat[,i]; # double brackets [[1]]
		}
    out_list;
	}
	
removeDuplicatesFromDataFrame	= function(df,mycolumn)
	{	
	# one column at a time
	ndf = df[!duplicated(df[mycolumn]), ];	
	}
	
	
getIndexOfDataFrameColumns = function(df,mycols)
	{
	n.cols = length(mycols);
	result = numeric(n.cols);
	for(i in 1:n.cols)
		{
		mycol = mycols[i];
		result[i] = which( names(df)== mycol );
		}
	if(n.cols == 1)
		{
		result[1];
		} else 	{
				result;
				}
	}
		
cleansePersonalityData = function(df)
	{
	ndf = removeColumnsFromDataFrame(df, "V00");
	
	date.formats = c("year","week","day");
	
	col.1 = convertDateStringToFormat(vec,"%Y","%m/%d/%Y %H:%M");
	col.2 = convertDateStringToFormat(vec,"%W","%m/%d/%Y %H:%M");
	col.3 = convertDateStringToFormat(vec,"%j","%m/%d/%Y %H:%M");
	
	newcols = cbind(col.1, col.2, col.3);
		colnames(newcols) = date.formats;
		
	ddf = replaceDateStringWithDateColumns(ndf,"date_test",newcols);
	
	sddf = sortDataFrameByNumericColumns(ddf, date.formats, "DESC");
	
	rsddf = removeDuplicatesFromDataFrame(sddf, "md5_email");
	
	rf = na.omit(rf);  # shouldn't be necessary, but above somewhere ...
		
		
	rf;
	}
	
	
vec2 = function(vecs) do.call(order, split(vecs, (seq(vecs) - 1) %/% ncol(vecs)))

mat_order <- function(x) do.call(order, split(x, (seq(x) - 1) %/% ncol(x)))
sortDataFrameByNumericColumns
df[do.call(order, split(vecs, (seq(vecs) - 1) %/% ncol(vecs))), ];

	
df = read.csv("personality-raw.txt",header=T,sep="|");
rdf = cleansePersonalityData(df);

dim(df);
dim(rdf);  # extra "NA" record at the end ?

write.table(ndf, file="personality-clean.txt", sep="|", col.names=T, row.names=F);



write.table(x, file="sample.txt", sep="|", col.names=T, row.names=F,);


#' https://stackoverflow.com/questions/63786363/
#' https://stackoverflow.com/questions/63801018/
#' Ronak Shah is my current solution ...

sortDataFrameByNumericColumns <- function(ddf, mycols, direction="DESC") {
  newvec <- integer(length(mycols))
  newvec[direction == 'ASC'] <- 1
  newvec[direction == 'DESC'] <- -1
  ddf[do.call(order, sweep(ddf[mycols], 2, newvec, `*`)), ]
}



mat_order <- function(x) do.call(order, split(x, (seq(x) - 1) %/% nrow(x)))


castMatrixToSequenceOfLists = function(mat)
    {
    list_length = ncol(mat);
    out_list = vector("list", list_length);
    for(i in 1:list_length)
        {
        out_list[[i]] = mat[,i]; # double brackets [[1]]
        }
    out_list;
    }












###########################
sortDataFrameByNumericColumns = function (df, mycols, direction="DESC")
	{
	## ASC DOESN'T WORK
	## haven't checked the custom direction features ...
	# if length of direction == dim(mycols) ... 
	# if direction.length is not n.cols, we will only use the first element ...
	
	n.cols = length(mycols);
	n.dirs = length(direction);
	
	if(n.dirs < n.cols) { direction = direction[1]; n.dirs = 1;} # we need to have at least n.cols number of directions, or we will assume it is only one ...
	
	vecs = matrix(NA, nrow=dim(df)[1],ncol=n.cols);
	
	
	for(i in 1:n.cols)
		{
		idx = which( names(df)== mycols[i] );
		dir = if(n.dirs==1) { direction } else { direction[i]};
		
		if(dir == "ASC")
			{
			vecs[,i] = df[,idx];
			} else {  
					# DESC
					vecs[,i] = -df[,idx];
					}		
		}	

	#vec2 = as.data.frame(vecs); class(vec2) = "list"; 
	vec2 = castMatrixToSequenceOfLists(vecs);
	
	# https://stackoverflow.com/questions/6819804/	
	# df[order(vec2), ];  # not working
	df[order( vecs[,1],vecs[,2],vecs[,3] ), ];  # only works if hard-coded
	                                            # currently breaks if cols != 3
	}
	

